{"version":3,"sources":["contexts/ThemeContextProvider.js","AddTodoBox/index.jsx","TodoItem/index.jsx","TodoList/index.jsx","ToggleThemeBtn/index.jsx","FunctionBtnWrap/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["ThemeContext","React","createContext","ThemeContextProvider","props","useState","isLightTheme","ligthTheme","bgColor","color","darkTheme","theme","setTheme","useEffect","localTheme","localStorage","getItem","JSON","parse","setItem","stringify","themeDatas","toggleTheme","newTheme","Provider","value","children","AddTodoBox","newTodo","isEditting","setIsEditting","optionLevels","setNewTodo","setAddBoxIsOpen","handleAddTodoBoxSubmit","useContext","style","inputIsEmpty","setInputIsEmpty","handleOnChange","e","target","name","handleCloseBox","preventDefault","id","level","validated","setValidated","className","backgroundColor","Form","noValidate","onSubmit","event","currentTarget","checkValidity","stopPropagation","onClick","Group","md","Label","htmlFor","Control","required","type","onChange","placeholder","autoComplete","Select","aria-label","map","option","index","titleLevel","trim","handleFormSubmit","TodoItem","todo","indexOfTodo","handleRemoveTodo","handleSetIsEditting","handleChangeLevel","disableUpLevel","setUpLevel","disableDownLevel","setDownLevel","findIndex","item","length","Badge","bg","opacity","TodoList","processedTodos","Table","bordered","borderColor","width","ToggleThemeBtn","bgColorBtn","ToggleThemeRef","useRef","current","classList","add","ref","toggle","FunctionBtnWrap","sortTypesList","handleSortFormOnSubmit","handleFilterFormOnSubmit","handleSearchFormOnSubmit","selectSortRef","selectFilterRef","searchInputRef","Row","Col","xs","sm","Button","handleSearchInputSubmit","action","variant","default","sortType","filterType","App","currentSortType","setCurrentSortType","currentFilterType","setCurrentFilterType","orderLevel","todos","setTodos","setProcessedTodos","localTodos","addBoxIsOpen","sorting","Todos","tmpTodos","sort","t1","t2","t1name","toLowerCase","t2name","filtering","filter","Container","hidden","splice","uuidv1","searchTerm","searchedTodos","forEach","toString","includes","push","newTodos","changeType","indexInOptionLevels","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0af7cff.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nexport const ThemeContext = React.createContext();\r\n\r\nconst ThemeContextProvider = (props) => {\r\n  const [theme, setTheme] = useState({\r\n    isLightTheme: true,\r\n    ligthTheme: {\r\n      bgColor: \"#fefefe\",\r\n      color: \"#111\",\r\n    },\r\n    darkTheme: {\r\n      bgColor: \"#333\",\r\n      color: \"#eee\",\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    let localTheme = localStorage.getItem(\"Theme\");\r\n    if (localTheme) {\r\n      setTheme(JSON.parse(localTheme));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"Theme\", JSON.stringify(theme));\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    let newTheme = { ...theme };\r\n    newTheme.isLightTheme = !newTheme.isLightTheme;\r\n    setTheme(newTheme);\r\n  };\r\n\r\n  const themeDatas = {\r\n    theme,\r\n    toggleTheme,\r\n  };\r\n  return (\r\n    <ThemeContext.Provider value={themeDatas}>\r\n      {props.children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ThemeContextProvider;\r\n","import React, { useContext, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./AddTodoBox.scss\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../contexts/ThemeContextProvider\";\r\n\r\nconst AddTodoBox = (props) => {\r\n  const {\r\n    newTodo,\r\n    isEditting,\r\n    setIsEditting,\r\n    optionLevels,\r\n    setNewTodo,\r\n    setAddBoxIsOpen,\r\n    handleAddTodoBoxSubmit,\r\n  } = props;\r\n\r\n  const { theme } = useContext(ThemeContext);\r\n  const { isLightTheme, ligthTheme, darkTheme } = theme;\r\n  const style = isLightTheme ? ligthTheme : darkTheme;\r\n\r\n  const [inputIsEmpty, setInputIsEmpty] = useState(false);\r\n\r\n  // handle when form submitted\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (newTodo.name.trim() !== \"\") {\r\n      handleAddTodoBoxSubmit();\r\n\r\n      setAddBoxIsOpen(false);\r\n      setInputIsEmpty(false);\r\n    } else {\r\n      setInputIsEmpty(true);\r\n    }\r\n  };\r\n\r\n  // handle when input or select ele change\r\n  const handleOnChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setInputIsEmpty(false);\r\n\r\n    setNewTodo({\r\n      ...newTodo,\r\n      [name]: name === \"name\" ? value : JSON.parse(value),\r\n    });\r\n  };\r\n\r\n  const handleCloseBox = (e) => {\r\n    e.preventDefault();\r\n    setAddBoxIsOpen(false);\r\n    setIsEditting(false);\r\n    setNewTodo({\r\n      id: 0,\r\n      name: \"\",\r\n      level: optionLevels[0],\r\n    });\r\n  };\r\n\r\n  const [validated, setValidated] = useState(false);\r\n\r\n  const handleSubmit = (event) => {\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    setValidated(true);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"add-todo-box\"\r\n      style={{ backgroundColor: style.bgColor, color: style.color }}\r\n    >\r\n      <Form\r\n        noValidate\r\n        className=\"form-wrap\"\r\n        validated={validated}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <span className=\"close-box\" onClick={(e) => handleCloseBox(e)}>\r\n          &times;\r\n        </span>\r\n        <h3 className=\"heading\">\r\n          {isEditting ? \"Edit công việc\" : \"Thêm công việc mới: \"}{\" \"}\r\n        </h3>\r\n        <Form.Group md=\"4\" className=\"form-gr\">\r\n          <Form.Label htmlFor=\"todoName\">Tên công việc</Form.Label>\r\n          <Form.Control\r\n            required\r\n            type=\"text\"\r\n            id=\"todoName\"\r\n            name=\"name\"\r\n            value={newTodo.name}\r\n            onChange={(e) => handleOnChange(e)}\r\n            placeholder=\"Nhập công việc\"\r\n            autoComplete=\"off\"\r\n            style={{ backgroundColor: style.bgColor, color: style.color }}\r\n          />\r\n          {inputIsEmpty ? (\r\n            <div className=\"input-empty-alert\">Looks good!</div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"form-gr\">\r\n          <Form.Label htmlFor=\"todoLevel\">Mức độ</Form.Label>\r\n          <Form.Select\r\n            aria-label=\"Default select example\"\r\n            id=\"todoLevel\"\r\n            name=\"level\"\r\n            value={JSON.stringify(newTodo.level)}\r\n            onChange={(e) => handleOnChange(e)}\r\n            style={{ backgroundColor: style.bgColor, color: style.color }}\r\n          >\r\n            {optionLevels.map((option, index) => (\r\n              <option key={index} value={JSON.stringify(option)}>\r\n                {option.titleLevel}{\" \"}\r\n              </option>\r\n            ))}\r\n          </Form.Select>\r\n        </Form.Group>\r\n      </Form>\r\n\r\n      {/* <Form action=\"\" className=\"form-wrap\"> */}\r\n      <div className=\"btn-wrap\">\r\n        <button type=\"submit\" onClick={(e) => handleFormSubmit(e)}>\r\n          {!isEditting ? \"Thêm\" : \"Save\"}\r\n        </button>\r\n        <button\r\n          onClick={(e) => {\r\n            return handleCloseBox(e);\r\n          }}\r\n        >\r\n          Hủy bỏ\r\n        </button>\r\n      </div>\r\n      {/* </Form> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nAddTodoBox.propTypes = {\r\n  newTodo: PropTypes.object,\r\n  isEditting: PropTypes.bool,\r\n  optionLevels: PropTypes.array,\r\n  setNewTodo: PropTypes.func,\r\n  setAddBoxIsOpen: PropTypes.func,\r\n  handleAddTodoBoxSubmit: PropTypes.func,\r\n};\r\n\r\nexport default AddTodoBox;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Badge } from \"react-bootstrap\";\r\n\r\nconst TodoItem = (props) => {\r\n  const {\r\n    todo,\r\n    indexOfTodo,\r\n    optionLevels,\r\n    handleRemoveTodo,\r\n    handleSetIsEditting,\r\n    handleChangeLevel,\r\n  } = props;\r\n\r\n  const [disableUpLevel, setUpLevel] = useState(0.8);\r\n  const [disableDownLevel, setDownLevel] = useState(0.8);\r\n\r\n  useEffect(() => {\r\n    const index = optionLevels.findIndex(\r\n      (item) => item.titleLevel === todo.level.titleLevel\r\n    );\r\n    setUpLevel(index === optionLevels.length - 1 ? 0.2 : 0.8);\r\n    setDownLevel(index === 0 ? 0.2 : 0.8);\r\n  }, []);\r\n\r\n  return (\r\n    <tr className=\"todo-item\">\r\n      <td>\r\n        <span>{indexOfTodo + 1}</span>\r\n      </td>\r\n      <td>\r\n        <span>{todo.name}</span>\r\n      </td>\r\n      <td className=\"level-box\">\r\n        <Badge bg={todo.level.bgColor}>{todo.level.titleLevel}</Badge>\r\n\r\n        <div className=\"change-level\">\r\n          <span\r\n            style={{ opacity: disableUpLevel }}\r\n            onClick={() =>\r\n              handleChangeLevel(\"Increase\", todo, setUpLevel, setDownLevel)\r\n            }\r\n          >\r\n            <i className=\"fas fa-chevron-up\"></i>\r\n          </span>\r\n          <span\r\n            style={{ opacity: disableDownLevel }}\r\n            onClick={() =>\r\n              handleChangeLevel(\"Decrease\", todo, setUpLevel, setDownLevel)\r\n            }\r\n          >\r\n            <i className=\"fas fa-chevron-down\"></i>\r\n          </span>\r\n        </div>\r\n      </td>\r\n      <td className=\"action-wrap \">\r\n        <button className=\"edit-todo\" onClick={() => handleSetIsEditting(todo)}>\r\n          <span>Sửa</span>\r\n        </button>\r\n        <button\r\n          className=\"remove-todo\"\r\n          onClick={() => handleRemoveTodo(todo.id)}\r\n        >\r\n          <span>Xóa</span>\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TodoItem from \"../TodoItem\";\r\nimport \"./TodoList.scss\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../contexts/ThemeContextProvider\";\r\n\r\nconst TodoList = (props) => {\r\n  // const { todos, setTodos, handleSetIsEditting, optionLevels } = props;\r\n  const {\r\n    processedTodos,\r\n    optionLevels,\r\n    handleRemoveTodo,\r\n    handleSetIsEditting,\r\n    handleChangeLevel,\r\n  } = props;\r\n\r\n  const { theme } = useContext(ThemeContext);\r\n  const { isLightTheme, ligthTheme, darkTheme } = theme;\r\n  const style = isLightTheme ? ligthTheme : darkTheme;\r\n\r\n  return (\r\n    <div className=\"todo-list\">\r\n      {/* <table border=\"1\" cellPadding=\"0\" cellSpacing=\"0\"> */}\r\n      <Table\r\n        bordered\r\n        style={{ backgroundColor: style.bgColor, color: style.color, borderColor: \"#aaa\" }}\r\n      >\r\n        <thead>\r\n          <tr className=\"table-header\">\r\n            <th width=\"20\">STT</th>\r\n            <th width=\"250\">Tên công việc</th>\r\n            <th width=\"250\">Mức độ</th>\r\n            <th width=\"200\">Hành động</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {processedTodos.map((todo, index) => (\r\n            <TodoItem\r\n              key={todo.id}\r\n              todo={todo}\r\n              indexOfTodo={index}\r\n              optionLevels={optionLevels}\r\n              handleRemoveTodo={handleRemoveTodo}\r\n              handleSetIsEditting={handleSetIsEditting}\r\n              handleChangeLevel={handleChangeLevel}\r\n            />\r\n          ))}\r\n        </tbody>\r\n        {/* </table> */}\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nTodoList.propTypes = {\r\n  processedTodos: PropTypes.array,\r\n  handleRemoveTodo: PropTypes.func,\r\n  handleSetIsEditting: PropTypes.func,\r\n  handleChangeLevel: PropTypes.func,\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport \"./ToggleThemeBtn.scss\";\r\n\r\nconst ToggleThemeBtn = (props) => {\r\n  const { toggleTheme, isLightTheme, bgColorBtn } = props;\r\n\r\n  const ToggleThemeRef = useRef(null);\r\n\r\n  const handleToggleTheme = () => {\r\n    ToggleThemeRef.current.classList.toggle(\"active\");\r\n    toggleTheme();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!isLightTheme) {\r\n      ToggleThemeRef.current.classList.add(\"active\");\r\n    }\r\n  }, [isLightTheme]);\r\n\r\n  return (\r\n    <div\r\n      ref={ToggleThemeRef}\r\n      htmlFor=\"dn\"\r\n      className=\"toggle\"\r\n      onClick={() => handleToggleTheme()}\r\n      style={{ backgroundColor: bgColorBtn }}\r\n    >\r\n      <div className=\"toggle__handler\">\r\n        <span className=\"crater crater--1\"></span>\r\n        <span className=\"crater crater--2\"></span>\r\n        <span className=\"crater crater--3\"></span>\r\n      </div>\r\n      <span className=\"star star--1\"></span>\r\n      <span className=\"star star--2\"></span>\r\n      <span className=\"star star--3\"></span>\r\n      <span className=\"star star--4\"></span>\r\n      <span className=\"star star--5\"></span>\r\n      <span className=\"star star--6\"></span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToggleThemeBtn;\r\n","import React, { useRef, useContext, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./FunctionBtnWrap.scss\";\r\nimport { Button, Col, Form, Row } from \"react-bootstrap\";\r\nimport { ThemeContext } from \"../contexts/ThemeContextProvider\";\r\nimport ToggleThemeBtn from \"../ToggleThemeBtn\";\r\n\r\nconst FunctionBtnWrap = (props) => {\r\n  const {\r\n    sortTypesList,\r\n    optionLevels,\r\n    setAddBoxIsOpen,\r\n    handleSortFormOnSubmit,\r\n    handleFilterFormOnSubmit,\r\n    handleSearchFormOnSubmit,\r\n  } = props;\r\n\r\n  const { theme, toggleTheme } = useContext(ThemeContext);\r\n  const { isLightTheme, ligthTheme, darkTheme } = theme;\r\n  const style = isLightTheme ? ligthTheme : darkTheme;\r\n\r\n  const bgColorBtn = isLightTheme ? \"#83D8FF\" : \"#749DD6\";\r\n\r\n  // declare DOM ref\r\n  const selectSortRef = useRef(null);\r\n  const selectFilterRef = useRef(null);\r\n  const searchInputRef = useRef(null);\r\n\r\n  const handleSearchInputSubmit = (e) => {\r\n    e.preventDefault();\r\n    handleSearchFormOnSubmit(searchInputRef.current.value);\r\n    searchInputRef.current.value = \"\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"function-btn-wrap\">\r\n      {/* row1 */}\r\n      <Row className=\"\">\r\n        <Col xs=\"12\" sm=\"6\" className=\"col\">\r\n          <div className=\"button-wrap\">\r\n            <Button\r\n              className=\"add-new-todo-btn\"\r\n              onClick={() => setAddBoxIsOpen(true)}\r\n            >\r\n              <i className=\"fas fa-plus\"></i>\r\n              Thêm công việc mới\r\n            </Button>\r\n\r\n            <ToggleThemeBtn\r\n              toggleTheme={toggleTheme}\r\n              isLightTheme={isLightTheme}\r\n              bgColorBtn={bgColorBtn}\r\n            />\r\n          </div>\r\n        </Col>\r\n\r\n        <Col xs=\"12\" sm=\"6\" className=\"col\">\r\n          <Form\r\n            className=\"search-form\"\r\n            onSubmit={(e) => handleSearchInputSubmit(e)}\r\n          >\r\n            <Button style={{ backgroundColor: bgColorBtn }} type=\"submit\">\r\n              <i className=\"fas fa-search\"></i>\r\n            </Button>\r\n            <Form.Control\r\n              style={{ backgroundColor: style.bgColor, color: style.color }}\r\n              ref={searchInputRef}\r\n              type=\"text\"\r\n              name=\"search\"\r\n              placeholder=\"Search level\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n      {/* end of row1 */}\r\n\r\n      {/* row2  */}\r\n      <Row>\r\n        <Col xs=\"12\" sm=\"6\" className=\"col\">\r\n          <Form\r\n            action=\"\"\r\n            className=\"sort-todos-form\"\r\n            onSubmit={(e) =>\r\n              handleSortFormOnSubmit(e, selectSortRef.current.value)\r\n            }\r\n          >\r\n            <Button\r\n              style={{ backgroundColor: bgColorBtn }}\r\n              variant=\"info\"\r\n              type=\"submit\"\r\n            >\r\n              Sort\r\n            </Button>\r\n            <Form.Select\r\n              style={{ backgroundColor: style.bgColor, color: style.color }}\r\n              ref={selectSortRef}\r\n              name=\"sortTodos\"\r\n              id=\"sortTodos\"\r\n              className=\"sort-todos-wrap\"\r\n            >\r\n              <option default>Sort type</option>\r\n              {sortTypesList.map((sortType, index) => (\r\n                <option key={index} value={sortType}>\r\n                  {sortType}\r\n                </option>\r\n              ))}\r\n            </Form.Select>\r\n          </Form>\r\n        </Col>\r\n        {/*  end of sort-todos-form  */}\r\n\r\n        {/*  sort-todos-form  */}\r\n        <Col xs=\"12\" sm=\"6\" className=\"col\">\r\n          <Form\r\n            action=\"\"\r\n            className=\"filter-todos-form\"\r\n            onSubmit={(e) =>\r\n              handleFilterFormOnSubmit(e, selectFilterRef.current.value)\r\n            }\r\n          >\r\n            <Button\r\n              style={{ backgroundColor: bgColorBtn }}\r\n              variant=\"info\"\r\n              type=\"submit\"\r\n            >\r\n              Filter\r\n            </Button>\r\n            <Form.Select\r\n              style={{ backgroundColor: style.bgColor, color: style.color }}\r\n              ref={selectFilterRef}\r\n              name=\"sortTodos\"\r\n              id=\"sortTodos\"\r\n              className=\"filter-todos-wrap\"\r\n            >\r\n              <option default>Filter level</option>\r\n              <option value=\"all\">All</option>\r\n              {optionLevels.map((filterType, index) => (\r\n                <option key={index} value={filterType.titleLevel}>\r\n                  {filterType.titleLevel}\r\n                </option>\r\n              ))}\r\n            </Form.Select>\r\n          </Form>\r\n        </Col>\r\n        {/*  end of filter-todos-form  */}\r\n      </Row>\r\n      {/* end of row2 */}\r\n    </div>\r\n  );\r\n};\r\n\r\nFunctionBtnWrap.propTypes = {\r\n  sortTypesList: PropTypes.array,\r\n  optionLevels: PropTypes.array,\r\n  setAddBoxIsOpen: PropTypes.func,\r\n  handleSortFormOnSubmit: PropTypes.func,\r\n  handleFilterFormOnSubmit: PropTypes.func,\r\n  handleSearchFormOnSubmit: PropTypes.func,\r\n};\r\n\r\nexport default FunctionBtnWrap;\r\n","import { useEffect, useState, useContext } from \"react\";\r\nimport { v1 as uuidv1 } from \"uuid\";\r\n\r\n// import components\r\nimport AddTodoBox from \"./AddTodoBox\";\r\nimport TodoList from \"./TodoList\";\r\nimport FunctionBtnWrap from \"./FunctionBtnWrap\";\r\nimport { ThemeContext } from \"./contexts/ThemeContextProvider\";\r\n\r\n// import scss\r\nimport \"./App.scss\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nfunction App() {\r\n  const { theme } = useContext(ThemeContext);\r\n  const { isLightTheme, ligthTheme, darkTheme } = theme;\r\n  const style = isLightTheme ? ligthTheme : darkTheme;\r\n\r\n  const [currentSortType, setCurrentSortType] = useState(\"\");\r\n  const [currentFilterType, setCurrentFilterType] = useState(\"\");\r\n\r\n  const sortTypesList = [\r\n    \"Tên: a-z\",\r\n    \"Tên: z-a\",\r\n    \"Mức độ: Tăng dần\",\r\n    \"Mức độ: Giảm dần\",\r\n  ];\r\n\r\n  const optionLevels = [\r\n    {\r\n      titleLevel: \"Không làm không sao\",\r\n      orderLevel: 3,\r\n      bgColor: \"success\",\r\n    },\r\n    {\r\n      titleLevel: \"Phải làm\",\r\n      orderLevel: 2,\r\n      bgColor: \"warning\",\r\n    },\r\n    {\r\n      titleLevel: \"Làm ngay\",\r\n      orderLevel: 1,\r\n      bgColor: \"danger\",\r\n    },\r\n  ];\r\n\r\n  const [todos, setTodos] = useState([]);\r\n  const [processedTodos, setProcessedTodos] = useState(todos);\r\n\r\n  useEffect(() => {\r\n    const localTodos = localStorage.getItem(\"todos\");\r\n    if (localTodos) {\r\n      setTodos(JSON.parse(localTodos));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  const [newTodo, setNewTodo] = useState({\r\n    id: 0,\r\n    name: \"\",\r\n    level: optionLevels[0],\r\n  });\r\n\r\n  const [isEditting, setIsEditting] = useState(false);\r\n\r\n  const [addBoxIsOpen, setAddBoxIsOpen] = useState(false);\r\n\r\n  // handle edit or add todo when click submit form in AddTodoBox\r\n  // {isEditting\r\n  // ? (find index of edited todo in processedTodos, then replace tmpTodos to edited todo)\r\n  // : (add newTodo to the end of todos) }\r\n  const handleAddTodoBoxSubmit = () => {\r\n    if (isEditting) {\r\n      const tmpTodos = [...todos];\r\n      const index = todos.findIndex((todo) => todo.id === newTodo.id);\r\n      tmpTodos.splice(index, 1, newTodo);\r\n\r\n      setTodos(sorting(filtering(tmpTodos)));\r\n      setProcessedTodos([...tmpTodos]);\r\n      setIsEditting(false);\r\n    } else {\r\n      newTodo.id = uuidv1();\r\n      setTodos([...todos, newTodo]);\r\n      setProcessedTodos([...todos, newTodo]);\r\n    }\r\n\r\n    setNewTodo({\r\n      id: 0,\r\n      name: \"\",\r\n      level: optionLevels[0],\r\n    });\r\n  };\r\n\r\n  // handle when click \"Sửa\" button of todoItem in table todolist\r\n  // take a param and pass this param to setNewTodo\r\n  const handleSetIsEditting = (todo) => {\r\n    setNewTodo({\r\n      id: todo.id,\r\n      name: todo.name,\r\n      level: todo.level,\r\n    });\r\n    setIsEditting(true);\r\n    setAddBoxIsOpen(true);\r\n  };\r\n\r\n  // handle when click on \"Sort\" button in FunctionBtnWrap\r\n  // takes a param d pass this param to setCurrentSortType\r\n  const handleSortFormOnSubmit = (e, sortType) => {\r\n    e.preventDefault();\r\n    setCurrentSortType(sortType);\r\n  };\r\n\r\n  // handle when click on \"Filter\" button in FunctionBtnWrap\r\n  // takes a param and pass this param to setCurrentFilterType\r\n  const handleFilterFormOnSubmit = (e, filterType) => {\r\n    e.preventDefault();\r\n    setCurrentFilterType(filterType);\r\n  };\r\n\r\n  const handleSearchFormOnSubmit = (searchTerm) => {\r\n    const searchedTodos = [];\r\n    searchTerm = searchTerm.toLowerCase().trim();\r\n    todos.forEach((todo) => {\r\n      if (\r\n        todo.id.toString().includes(searchTerm) ||\r\n        todo.name.toLowerCase().includes(searchTerm) ||\r\n        todo.level.titleLevel.toLowerCase().includes(searchTerm)\r\n      ) {\r\n        searchedTodos.push(todo);\r\n      }\r\n    });\r\n    setProcessedTodos(sorting(filtering(searchedTodos)));\r\n  };\r\n\r\n  // handle sorting,\r\n  function sorting(Todos) {\r\n    const tmpTodos = [...Todos];\r\n    switch (currentSortType) {\r\n      case \"Tên: a-z\":\r\n        tmpTodos.sort((t1, t2) => {\r\n          let t1name = t1.name.toLowerCase();\r\n          let t2name = t2.name.toLowerCase();\r\n          if (t1name < t2name) {\r\n            return -1;\r\n          }\r\n          if (t1name > t2name) {\r\n            return 1;\r\n          }\r\n          return 0;\r\n        });\r\n        break;\r\n\r\n      case \"Tên: z-a\":\r\n        tmpTodos.sort((t1, t2) => {\r\n          let t1name = t1.name.toLowerCase();\r\n          let t2name = t2.name.toLowerCase();\r\n          if (t1name > t2name) {\r\n            return -1;\r\n          }\r\n          if (t1name < t2name) {\r\n            return 1;\r\n          }\r\n          return 0;\r\n        });\r\n        break;\r\n\r\n      case \"Mức độ: Tăng dần\":\r\n        tmpTodos.sort((t1, t2) => t2.level.orderLevel - t1.level.orderLevel);\r\n        break;\r\n\r\n      case \"Mức độ: Giảm dần\":\r\n        tmpTodos.sort((t1, t2) => t1.level.orderLevel - t2.level.orderLevel);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    // setProcessedTodos([...tmpTodos]);\r\n    return tmpTodos;\r\n  }\r\n\r\n  // handle filtering\r\n  function filtering(Todos) {\r\n    let tmpTodos = [];\r\n    if (\r\n      optionLevels.findIndex(\r\n        (level) => level.titleLevel === currentFilterType\r\n      ) !== -1\r\n    ) {\r\n      tmpTodos = Todos.filter(\r\n        (todo) => todo.level.titleLevel === currentFilterType\r\n      );\r\n    } else {\r\n      tmpTodos = [...Todos];\r\n    }\r\n    // setProcessedTodos(tmpTodos);\r\n    return tmpTodos;\r\n  }\r\n\r\n  // handle to remove the selected todo when click \"Xóa\" btn in TodoItem\r\n  function handleRemoveTodo(id) {\r\n    let newTodos = todos.filter((todo) => todo.id !== id);\r\n    setTodos([...newTodos]);\r\n  }\r\n\r\n  // handle change level of todo when click on level box in table\r\n  // take three params: changeType, todo, index\r\n  const handleChangeLevel = (changeType, todo, setUpLevel, setDownLevel) => {\r\n    let indexInOptionLevels = optionLevels.findIndex(\r\n      (item) => item.titleLevel === todo.level.titleLevel\r\n    );\r\n\r\n    switch (changeType) {\r\n      case \"Decrease\":\r\n        setUpLevel(0.8);\r\n        if (indexInOptionLevels === 0) {\r\n          setDownLevel(0.2);\r\n        } else if (indexInOptionLevels === 1) {\r\n          setDownLevel(0.2);\r\n          indexInOptionLevels -= 1;\r\n        } else {\r\n          indexInOptionLevels -= 1;\r\n        }\r\n        break;\r\n\r\n      case \"Increase\":\r\n        setDownLevel(0.8);\r\n        if (indexInOptionLevels === optionLevels.length - 1) {\r\n          setUpLevel(0.2);\r\n        } else if (indexInOptionLevels === optionLevels.length - 2) {\r\n          setUpLevel(0.2);\r\n          indexInOptionLevels += 1;\r\n        } else {\r\n          indexInOptionLevels += 1;\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    todo.level = optionLevels[indexInOptionLevels];\r\n    const tmpTodos = [...todos];\r\n    const index = todos.findIndex((item) => item.id === todo.id);\r\n    tmpTodos.splice(index, 1, todo);\r\n    setProcessedTodos(sorting(filtering(tmpTodos)));\r\n  };\r\n\r\n  useEffect(() => {\r\n    setProcessedTodos([...filtering(todos)]);\r\n  }, [todos.length, currentFilterType]);\r\n\r\n  useEffect(() => {\r\n    setProcessedTodos(sorting(todos));\r\n  }, [todos.length, currentSortType]);\r\n\r\n  return (\r\n    <div\r\n      className=\"app\"\r\n      style={{ backgroundColor: style.bgColor, color: style.color }}\r\n    >\r\n      <Container className=\"app\">\r\n        <h3 className=\"app-title\">LA's Task</h3>\r\n        <div className=\"app-content\">\r\n          {addBoxIsOpen ? (\r\n            <AddTodoBox\r\n              hidden={!addBoxIsOpen}\r\n              newTodo={newTodo}\r\n              isEditting={isEditting}\r\n              setIsEditting={setIsEditting}\r\n              optionLevels={optionLevels}\r\n              setNewTodo={setNewTodo}\r\n              setAddBoxIsOpen={setAddBoxIsOpen}\r\n              handleAddTodoBoxSubmit={handleAddTodoBoxSubmit}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n\r\n          <div className=\"todo-wrap\">\r\n            <FunctionBtnWrap\r\n              sortTypesList={sortTypesList}\r\n              optionLevels={optionLevels}\r\n              setAddBoxIsOpen={setAddBoxIsOpen}\r\n              handleSortFormOnSubmit={handleSortFormOnSubmit}\r\n              handleFilterFormOnSubmit={handleFilterFormOnSubmit}\r\n              handleSearchFormOnSubmit={handleSearchFormOnSubmit}\r\n            />\r\n\r\n            <TodoList\r\n              processedTodos={processedTodos}\r\n              optionLevels={optionLevels}\r\n              handleRemoveTodo={handleRemoveTodo}\r\n              handleSetIsEditting={handleSetIsEditting}\r\n              handleChangeLevel={handleChangeLevel}\r\n            />\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"./index.scss\";\r\nimport ThemeContextProvider from \"./contexts/ThemeContextProvider\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeContextProvider>\r\n      <App />\r\n    </ThemeContextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}